// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trading.Authen.Repository.Entity;

namespace Trading.Authen.Repository.Migrations
{
    [DbContext(typeof(TradingDbAuthenContext))]
    [Migration("20220601100720_updateDatabase")]
    partial class updateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trading.Authen.Repository.Entity.Permissions", b =>
                {
                    b.Property<int>("IdPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("IdRoleAction")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdPermission");

                    b.HasIndex("IdRoleAction");

                    b.HasIndex("IdUser");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.RoleAction", b =>
                {
                    b.Property<int>("IdRoleAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("RoleActionName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdRoleAction");

                    b.HasIndex("IdRole");

                    b.ToTable("RoleActions");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.RoleGroup", b =>
                {
                    b.Property<int>("IdRoleGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdRoleGroup");

                    b.ToTable("RoleGroups");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.RoleGroupAction", b =>
                {
                    b.Property<int>("IdRoleGroupAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("IdRoleAction")
                        .HasColumnType("int");

                    b.Property<int>("IdRoleGroup")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdRoleGroupAction");

                    b.HasIndex("IdRoleAction");

                    b.HasIndex("IdRoleGroup");

                    b.ToTable("RoleGroupActions");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.Roles", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.Screen", b =>
                {
                    b.Property<int>("IdScree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("IdScree");

                    b.HasIndex("IdRole");

                    b.HasIndex("ParentId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.UserHasRoleGroup", b =>
                {
                    b.Property<int>("IdUserHasRoleGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("IdRoleGroup")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdUserHasRoleGroup");

                    b.HasIndex("IdRoleGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("UserHasRoleGroups");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("IdAvatar")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.Permissions", b =>
                {
                    b.HasOne("Trading.Authen.Repository.Entity.RoleAction", "RoleAction")
                        .WithMany("Permissions")
                        .HasForeignKey("IdRoleAction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trading.Authen.Repository.Entity.Users", "Users")
                        .WithMany("Permissions")
                        .HasForeignKey("IdUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.RoleAction", b =>
                {
                    b.HasOne("Trading.Authen.Repository.Entity.Roles", "Role")
                        .WithMany("RoleActions")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.RoleGroupAction", b =>
                {
                    b.HasOne("Trading.Authen.Repository.Entity.RoleAction", "RoleAction")
                        .WithMany("RoleGroupActions")
                        .HasForeignKey("IdRoleAction")
                        .IsRequired();

                    b.HasOne("Trading.Authen.Repository.Entity.RoleGroup", "RoleGroup")
                        .WithMany("RoleGroupActions")
                        .HasForeignKey("IdRoleGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.Screen", b =>
                {
                    b.HasOne("Trading.Authen.Repository.Entity.Roles", "Role")
                        .WithMany("Screes")
                        .HasForeignKey("IdRole");

                    b.HasOne("Trading.Authen.Repository.Entity.Screen", null)
                        .WithMany("Screens")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Trading.Authen.Repository.Entity.UserHasRoleGroup", b =>
                {
                    b.HasOne("Trading.Authen.Repository.Entity.RoleGroup", "RoleGroup")
                        .WithMany("UserHasRoleGroups")
                        .HasForeignKey("IdRoleGroup")
                        .IsRequired();

                    b.HasOne("Trading.Authen.Repository.Entity.Users", "User")
                        .WithMany("UserHasRoleGroups")
                        .HasForeignKey("IdUser")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
